// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME RootDict

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/RooPowerLawSum.h"
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/WSTFileWrapper.h"
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/RooExponentialSum.h"
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/RooPowerLaw.h"
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/ProfileMultiplePdfs.h"
#include "/afs/cern.ch/work/m/milee/HZg_envelope_102X/Background/interface/PdfModelBuilder.h"

// Header files passed via #pragma extra_include

namespace ROOT {
   static TClass *RooPowerLawSum_Dictionary();
   static void RooPowerLawSum_TClassManip(TClass*);
   static void *new_RooPowerLawSum(void *p = 0);
   static void *newArray_RooPowerLawSum(Long_t size, void *p);
   static void delete_RooPowerLawSum(void *p);
   static void deleteArray_RooPowerLawSum(void *p);
   static void destruct_RooPowerLawSum(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RooPowerLawSum*)
   {
      ::RooPowerLawSum *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RooPowerLawSum));
      static ::ROOT::TGenericClassInfo 
         instance("RooPowerLawSum", "interface/RooPowerLawSum.h", 26,
                  typeid(::RooPowerLawSum), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &RooPowerLawSum_Dictionary, isa_proxy, 0,
                  sizeof(::RooPowerLawSum) );
      instance.SetNew(&new_RooPowerLawSum);
      instance.SetNewArray(&newArray_RooPowerLawSum);
      instance.SetDelete(&delete_RooPowerLawSum);
      instance.SetDeleteArray(&deleteArray_RooPowerLawSum);
      instance.SetDestructor(&destruct_RooPowerLawSum);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RooPowerLawSum*)
   {
      return GenerateInitInstanceLocal((::RooPowerLawSum*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::RooPowerLawSum*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *RooPowerLawSum_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::RooPowerLawSum*)0x0)->GetClass();
      RooPowerLawSum_TClassManip(theClass);
   return theClass;
   }

   static void RooPowerLawSum_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *WSTFileWrapper_Dictionary();
   static void WSTFileWrapper_TClassManip(TClass*);
   static void delete_WSTFileWrapper(void *p);
   static void deleteArray_WSTFileWrapper(void *p);
   static void destruct_WSTFileWrapper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WSTFileWrapper*)
   {
      ::WSTFileWrapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::WSTFileWrapper));
      static ::ROOT::TGenericClassInfo 
         instance("WSTFileWrapper", "interface/WSTFileWrapper.h", 10,
                  typeid(::WSTFileWrapper), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &WSTFileWrapper_Dictionary, isa_proxy, 0,
                  sizeof(::WSTFileWrapper) );
      instance.SetDelete(&delete_WSTFileWrapper);
      instance.SetDeleteArray(&deleteArray_WSTFileWrapper);
      instance.SetDestructor(&destruct_WSTFileWrapper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WSTFileWrapper*)
   {
      return GenerateInitInstanceLocal((::WSTFileWrapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::WSTFileWrapper*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *WSTFileWrapper_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::WSTFileWrapper*)0x0)->GetClass();
      WSTFileWrapper_TClassManip(theClass);
   return theClass;
   }

   static void WSTFileWrapper_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *RooExponentialSum_Dictionary();
   static void RooExponentialSum_TClassManip(TClass*);
   static void *new_RooExponentialSum(void *p = 0);
   static void *newArray_RooExponentialSum(Long_t size, void *p);
   static void delete_RooExponentialSum(void *p);
   static void deleteArray_RooExponentialSum(void *p);
   static void destruct_RooExponentialSum(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RooExponentialSum*)
   {
      ::RooExponentialSum *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RooExponentialSum));
      static ::ROOT::TGenericClassInfo 
         instance("RooExponentialSum", "interface/RooExponentialSum.h", 26,
                  typeid(::RooExponentialSum), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &RooExponentialSum_Dictionary, isa_proxy, 0,
                  sizeof(::RooExponentialSum) );
      instance.SetNew(&new_RooExponentialSum);
      instance.SetNewArray(&newArray_RooExponentialSum);
      instance.SetDelete(&delete_RooExponentialSum);
      instance.SetDeleteArray(&deleteArray_RooExponentialSum);
      instance.SetDestructor(&destruct_RooExponentialSum);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RooExponentialSum*)
   {
      return GenerateInitInstanceLocal((::RooExponentialSum*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::RooExponentialSum*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *RooExponentialSum_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::RooExponentialSum*)0x0)->GetClass();
      RooExponentialSum_TClassManip(theClass);
   return theClass;
   }

   static void RooExponentialSum_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *RooPowerLaw_Dictionary();
   static void RooPowerLaw_TClassManip(TClass*);
   static void *new_RooPowerLaw(void *p = 0);
   static void *newArray_RooPowerLaw(Long_t size, void *p);
   static void delete_RooPowerLaw(void *p);
   static void deleteArray_RooPowerLaw(void *p);
   static void destruct_RooPowerLaw(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RooPowerLaw*)
   {
      ::RooPowerLaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RooPowerLaw));
      static ::ROOT::TGenericClassInfo 
         instance("RooPowerLaw", "interface/RooPowerLaw.h", 25,
                  typeid(::RooPowerLaw), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &RooPowerLaw_Dictionary, isa_proxy, 0,
                  sizeof(::RooPowerLaw) );
      instance.SetNew(&new_RooPowerLaw);
      instance.SetNewArray(&newArray_RooPowerLaw);
      instance.SetDelete(&delete_RooPowerLaw);
      instance.SetDeleteArray(&deleteArray_RooPowerLaw);
      instance.SetDestructor(&destruct_RooPowerLaw);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RooPowerLaw*)
   {
      return GenerateInitInstanceLocal((::RooPowerLaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::RooPowerLaw*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *RooPowerLaw_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::RooPowerLaw*)0x0)->GetClass();
      RooPowerLaw_TClassManip(theClass);
   return theClass;
   }

   static void RooPowerLaw_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *ProfileMultiplePdfs_Dictionary();
   static void ProfileMultiplePdfs_TClassManip(TClass*);
   static void *new_ProfileMultiplePdfs(void *p = 0);
   static void *newArray_ProfileMultiplePdfs(Long_t size, void *p);
   static void delete_ProfileMultiplePdfs(void *p);
   static void deleteArray_ProfileMultiplePdfs(void *p);
   static void destruct_ProfileMultiplePdfs(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProfileMultiplePdfs*)
   {
      ::ProfileMultiplePdfs *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(